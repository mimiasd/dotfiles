"""""""""""Vundle设置"""""""""""
set nocompatible             
filetype off    

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Bundle 'VundleVim/Vundle.vim'

Bundle 'scrooloose/nerdtree'

Bundle 'Xuyuanp/nerdtree-git-plugin'

Bundle 'scrooloose/nerdcommenter'

Bundle 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Bundle 'junegunn/fzf.vim' 

Bundle 'mileszs/ack.vim'

Bundle 'tpope/vim-surround'

Bundle 'SirVer/ultisnips'

Bundle 'tpope/vim-repeat'

Bundle 'vim-airline/vim-airline'

Bundle 'vim-scripts/ctags.vim'

Bundle 'majutsushi/tagbar'

Bundle 'easymotion/vim-easymotion'

Bundle 'altercation/vim-colors-solarized'

Bundle 'fatih/vim-go'
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>i <Plug>(go-imports)
au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>f <Plug>(gofmt)
au FileType go nmap <Leader>t <Plug>(go-test)

Bundle 'nsf/gocode', {'rtp': 'vim/'}
filetype plugin on
imap <C-a> <C-x><C-o>





let g:NERDSpaceDelims=1

Bundle 'godlygeek/tabular'
nmap <Leader>= :Tabularize /=<CR>
vmap <Leader>= :Tabularize /=<CR>
nmap <Leader>: :Tabularize /:<CR>
vmap <Leader>: :Tabularize /:<CR>

Bundle 'luochen1990/rainbow'
let g:rainbow_active = 1 

Bundle 'Valloric/YouCompleteMe'
set runtimepath+=~/.vim/bundle/YouCompleteMe
let g:ycm_collect_identifiers_from_tags_files = 1           " 开启 YCM 基于标签引擎
let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释与字符串中的内容也用于补全
let g:syntastic_ignore_files=[".*\.py$"]
let g:ycm_seed_identifiers_with_syntax = 1                  " 语法关键字补全
let g:ycm_complete_in_comments = 1                          " 在注释输入中也能补全
let g:ycm_complete_in_strings = 1                           " 在字符串输入中也能补全
let g:ycm_key_list_select_completion = ['<c-n>', '<Down>']  " 映射按键, 没有这个会拦截掉tab
"inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>" |    " 回车即选中当前项
let g:ycm_error_symbol = '>>'
let g:ycm_warning_symbol = '>*'
nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
nmap <F4> :YcmDiags<CR>

" html/css
Bundle 'mattn/emmet-vim'

" 对齐线
Bundle 'nathanaelkane/vim-indent-guides'
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
nnoremap <silent> eg    :IndentGuidesEnable<CR>
nnoremap <silent> dg    :IndentGuidesDisable<CR>

Bundle 'tpope/vim-fugitive'

" ...
call vundle#end()            
filetype plugin indent on     


"""""""""""NERDTree""""""""""""
" 切换显示NERDtree
map <C-e> :NERDTreeToggle<CR>

" 在NERDtree中找到当前文件的位置
map <leader>e :NERDTreeFind<CR>

" 当最后只剩nerdtree目录时，直接关闭vim
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" nerdtree需要被忽略的文件
let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']

" 设置为1时，显示nerdtree文件层次的编号.
let NERDTreeShowLineNumbers=1


"""""""""""nerdtree-git-plugin"""""""""""
" nerdtree 目录的 git 状态相关符号
let g:NERDTreeIndicatorMapCustom = {
	\ "Modified"  : "✹",
	\ "Staged"    : "✚",
	\ "Untracked" : "✭",
	\ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }


"""""""""""nerdcommenter"""""""""""
" 注释的时候自动加个空格, 强迫症必配
let g:NERDSpaceDelims = 1
 

"""""""""""fzf.vim"""""""""""
" 映射 :Files 命令到 Ctrl+p
nnoremap <silent> <C-p> :Files<CR>


"""""""""""ack.vim"""""""""""
" 映射 :Ack 命令到 <leader>a
map <leader>a :Ack<space>


"""""""""""vim-airline"""""""""""
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'

" 是否打开tabline
let g:airline#extensions#tabline#enabled = 1

" 这个是安装字体后 必须设置此项"
let g:airline_powerline_fonts = 1

" 设置切换Buffer快捷键"
 nnoremap <leader><left> :bp<CR>
 nnoremap <leader><right> :bn<CR>

 
"""""""""""tagbar"""""""""""
nnoremap <silent> tb :TagbarToggle<CR>

" gotags 配置
let g:tagbar_type_go = {
    \ 'ctagstype': 'go',
    \ 'kinds' : [
        \'p:package',
        \'f:function',
        \'v:variables',
        \'t:type',
        \'c:const'
    \]
\}


"""""""""""vim-easymotion"""""""""""
" 前缀映射
map <leader> <Plug>(easymotion-prefix)

let g:EasyMotion_smartcase = 1

" map <Leader>l <Plug>(easymotion-lineforward)
" map <Leader>j <Plug>(easymotion-j)
" map <Leader>k <Plug>(easymotion-k)
" map <Leader>h <Plug>(easymotion-linebackward)


"""""""""""vim-colors-solarized"""""""""""
" solarized配色方案设置
syntax enable

let g:solarized_termcolors=256
let g:solarized_termtrans=1
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"

set background=dark

colorscheme solarized

